#!/bin/bash

echo "üîç DIAGN√ìSTICO COMPLETO - FESTA JULINA 2025"
echo "=========================================="
echo ""

# URL do site
URL="https://festa-julina-2025.onrender.com"

# 1. Teste de conectividade b√°sica
echo "1. üåê TESTE DE CONECTIVIDADE"
echo "----------------------------"
echo "Testando: $URL"
STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$URL")
echo "Status HTTP: $STATUS"

if [ "$STATUS" -eq 200 ]; then
    echo "‚úÖ Site est√° respondendo normalmente"
else
    echo "‚ùå Site n√£o est√° respondendo (Status: $STATUS)"
    exit 1
fi

# 2. Teste do painel admin
echo ""
echo "2. üîê TESTE DO PAINEL ADMIN"
echo "----------------------------"
ADMIN_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$URL/admin.html")
echo "Status Admin: $ADMIN_STATUS"

if [ "$ADMIN_STATUS" -eq 200 ]; then
    echo "‚úÖ Painel admin est√° acess√≠vel"
else
    echo "‚ùå Painel admin n√£o est√° acess√≠vel (Status: $ADMIN_STATUS)"
fi

# 3. Teste de endpoints da API
echo ""
echo "3. üîß TESTE DOS ENDPOINTS DA API"
echo "---------------------------------"

# Teste endpoint status
STATUS_API=$(curl -s -o /dev/null -w "%{http_code}" "$URL/status")
echo "Endpoint /status: $STATUS_API"

# Teste endpoint dados (deve retornar 401 sem auth)
DADOS_API=$(curl -s -o /dev/null -w "%{http_code}" "$URL/dados")
echo "Endpoint /dados: $DADOS_API (esperado 401)"

# Teste endpoint download (deve retornar 401 sem auth)
DOWNLOAD_API=$(curl -s -o /dev/null -w "%{http_code}" "$URL/download")
echo "Endpoint /download: $DOWNLOAD_API (esperado 401)"

# 4. Teste com autentica√ß√£o
echo ""
echo "4. üîë TESTE COM AUTENTICA√á√ÉO"
echo "----------------------------"
AUTH_TEST=$(curl -u "admin:Felicidade2020!" -s -o /dev/null -w "%{http_code}" "$URL/dados")
echo "Autentica√ß√£o admin: $AUTH_TEST"

if [ "$AUTH_TEST" -eq 200 ]; then
    echo "‚úÖ Autentica√ß√£o funcionando"
    # Buscar dados reais
    DADOS_REAIS=$(curl -u "admin:Felicidade2020!" -s "$URL/dados")
    TOTAL=$(echo "$DADOS_REAIS" | grep -o '"total":[0-9]*' | cut -d':' -f2)
    echo "Total de registros: $TOTAL"
else
    echo "‚ùå Problema na autentica√ß√£o"
fi

# 5. Teste de performance
echo ""
echo "5. ‚ö° TESTE DE PERFORMANCE"
echo "-------------------------"
RESPONSE_TIME=$(curl -s -o /dev/null -w "%{time_total}" "$URL")
echo "Tempo de resposta: ${RESPONSE_TIME}s"

if (( $(echo "$RESPONSE_TIME < 5.0" | bc -l) )); then
    echo "‚úÖ Performance adequada"
else
    echo "‚ö†Ô∏è Performance lenta"
fi

# 6. Teste de SSL
echo ""
echo "6. üîí TESTE DE SSL"
echo "------------------"
SSL_INFO=$(curl -s -I "$URL" | grep -i "strict-transport-security")
if [ -n "$SSL_INFO" ]; then
    echo "‚úÖ SSL/HTTPS funcionando"
    echo "   $SSL_INFO"
else
    echo "‚ùå Problema com SSL"
fi

# 7. Teste de cache
echo ""
echo "7. üíæ TESTE DE CACHE"
echo "--------------------"
CACHE_INFO=$(curl -s -I "$URL" | grep -i "cache-control")
if [ -n "$CACHE_INFO" ]; then
    echo "‚úÖ Headers de cache configurados"
    echo "   $CACHE_INFO"
else
    echo "‚ö†Ô∏è Cache n√£o configurado"
fi

# 8. Teste de headers de seguran√ßa
echo ""
echo "8. üõ°Ô∏è TESTE DE SEGURAN√áA"
echo "------------------------"
SECURITY_HEADERS=$(curl -s -I "$URL" | grep -E "(x-frame-options|x-content-type-options|x-xss-protection)")
if [ -n "$SECURITY_HEADERS" ]; then
    echo "‚úÖ Headers de seguran√ßa configurados"
    echo "$SECURITY_HEADERS"
else
    echo "‚ö†Ô∏è Headers de seguran√ßa n√£o encontrados"
fi

# 9. Teste de DNS
echo ""
echo "9. üåç TESTE DE DNS"
echo "------------------"
DNS_INFO=$(nslookup festa-julina-2025.onrender.com 2>/dev/null | grep -A2 "Name:")
if [ -n "$DNS_INFO" ]; then
    echo "‚úÖ DNS resolvendo corretamente"
    echo "$DNS_INFO"
else
    echo "‚ùå Problema com DNS"
fi

# 10. Resumo final
echo ""
echo "üìä RESUMO FINAL"
echo "==============="
echo ""

if [ "$STATUS" -eq 200 ] && [ "$ADMIN_STATUS" -eq 200 ] && [ "$AUTH_TEST" -eq 200 ]; then
    echo "üéâ DIAGN√ìSTICO: SITE FUNCIONANDO NORMALMENTE"
    echo ""
    echo "‚úÖ Todos os testes passaram com sucesso!"
    echo "‚úÖ Site principal: Funcionando"
    echo "‚úÖ Painel admin: Funcionando"
    echo "‚úÖ API endpoints: Funcionando"
    echo "‚úÖ Autentica√ß√£o: Funcionando"
    echo "‚úÖ SSL/HTTPS: Funcionando"
    echo ""
    echo "üîó LINKS PARA TESTE:"
    echo "   ‚Ä¢ Site: $URL"
    echo "   ‚Ä¢ Admin: $URL/admin.html"
    echo "   ‚Ä¢ Credenciais: admin / Felicidade2020!"
    echo ""
    echo "üí° POSS√çVEIS CAUSAS DE PROBLEMAS DE ACESSO:"
    echo "   1. Cache do navegador (Ctrl+F5 para limpar)"
    echo "   2. DNS local (tente outro navegador/dispositivo)"
    echo "   3. Firewall/Proxy corporativo"
    echo "   4. Conex√£o de internet inst√°vel"
    echo "   5. Extens√µes do navegador bloqueando"
    echo ""
    echo "üîß SOLU√á√ïES RECOMENDADAS:"
    echo "   ‚Ä¢ Limpar cache do navegador"
    echo "   ‚Ä¢ Tentar modo privado/inc√≥gnito"
    echo "   ‚Ä¢ Testar em outro navegador"
    echo "   ‚Ä¢ Verificar conex√£o de internet"
    echo "   ‚Ä¢ Desabilitar extens√µes temporariamente"
else
    echo "‚ùå DIAGN√ìSTICO: PROBLEMAS DETECTADOS"
    echo ""
    echo "Problemas encontrados:"
    [ "$STATUS" -ne 200 ] && echo "   ‚Ä¢ Site principal n√£o responde"
    [ "$ADMIN_STATUS" -ne 200 ] && echo "   ‚Ä¢ Painel admin n√£o responde"
    [ "$AUTH_TEST" -ne 200 ] && echo "   ‚Ä¢ Autentica√ß√£o n√£o funciona"
    echo ""
    echo "üîß A√á√ïES RECOMENDADAS:"
    echo "   ‚Ä¢ Verificar logs do Render"
    echo "   ‚Ä¢ Redeploy da aplica√ß√£o"
    echo "   ‚Ä¢ Verificar configura√ß√µes do servidor"
fi

echo ""
echo "Data do teste: $(date)"
echo "=========================================="
